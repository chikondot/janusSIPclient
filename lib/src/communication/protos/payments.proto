syntax = "proto3";

package payment;
option go_package = "github.com/chikondot/momari/payments/paymentspb";

// Status of transaction
enum PaymentStatus {
  SUCCESS = 0;
  FAILED = 1;
  PENDING = 2;
}

// Method of payment
enum PaymentMethod {
  PAYPAL = 0;
  PAYNOW = 1;
  HOTRECHARGE = 2;
  STRIPE = 3;
  BALANCE = 4;
}

// Additional details of payment transaction
message PaymentDetails {
  string transactionID = 1;
  string hash = 2;
}

// Payment Schema definition
message Payment {
  string username = 1;        // username of payment owner
  string contact = 2;         // contact information
  string email = 3;           // email address of owner
  string currency = 4;        // currency of wallet
  double amount = 5;          // transaction amount
  string domain = 6;          // user domain
  PaymentStatus status = 7;   // status of transaction
  PaymentMethod method = 8;   // method of payment
  PaymentDetails details = 9; // additional details of transaction
  string created = 999;       // datetime of tranaction creation
}

// Paynow || Hotrecharge || PayPal || Stripe Topup
message paymentRequest {
  Payment payment = 1; // send payement
  string nonce = 2;    // nonce generated for braintree
}

// Get Payment
message infoPayment { string contact = 1; }

// Empty response
message detailsPayment { string result = 1; }

// Payment Service
service payService {
  rpc GetPayPalToken(detailsPayment) returns (detailsPayment);
  rpc MakePayPalPayment(paymentRequest) returns (detailsPayment);
  rpc MakeStripePayment(paymentRequest) returns (detailsPayment);
  rpc MakePayNowPayment(paymentRequest) returns (detailsPayment);
  rpc MakeAirtimePayment(paymentRequest) returns (detailsPayment);
  rpc MakeGurooPayment(paymentRequest) returns (detailsPayment);
  rpc GetPayment(infoPayment) returns (Payment);
  rpc ListPayment(infoPayment) returns (stream Payment);
}